@page "/Nominas"
@rendermode InteractiveServer
@inject NominaService nominaService
@inject NavigationManager navigation

<PageTitle>Nominas</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Nominas</strong></h3>
			<button type="button" class="btn btn-outline-primary" @onclick="IrACrear"><i class="bi bi-plus-circle" /> Crear</button>
		</div>
		@*Body*@
		<div class="card-body">
			@if (loading)
			{
				<div class="d-flex justify-content-center">
					<div class="spinner-border text-info">
					</div>
				</div>
			}
			else if (nominas.Count == 0)
			{
				<h1 class="miMensaje"><i class="bi bi-exclamation-triangle" /> No hay Nominas creadas</h1>
			}
			else
			{
				@*Campos a Filtrar*@
				<div class="mb-3">
					<div class="row align-items-center">
						<label class="form-label" for="filtro"><strong>Campo a Filtrar:</strong></label>
						<div class="col-3">
							<InputSelect id="filtro" class="form-select" @bind-Value="filtro">
								<option selected disabled>Elije una opci&oacute;n</option>
								<option value="id">Id</option>
								<option value="empleado">Empleado</option>
								<option value="puesto">Puesto</option>
							</InputSelect>
						</div>
						<div class="col-auto miFlecha">
							<p>→</p>
						</div>
						<div class="col-4">
							<div class="input-group">
								<InputText class="form-control" @bind-Value="valorFiltro" placeholder="Ingrese un dato para filtrar"></InputText>
								<button type="button" class="btn btn-outline-primary" @onclick="Buscar"><i class="bi bi-search" /></button>
							</div>
						</div>
						<div class="col-3">
							<button type="button" class="btn btn-outline-secondary" @onclick="Restablecer"><i class="bi bi-arrow-clockwise" /> Restablecer</button>
						</div>
					</div>
				</div>

				//(nombre, apellidos, cédula, dirección, teléfono, profesión,
				//registrar el departamento y el puesto que va a desempeñar).

				<table class="table table-bordered miTabla">
					<thead>
						<tr>
							<th>NominaId</th>
							<th>Empleado</th>
							<th>Puesto de Trabajo</th>
							<th>Per&iacute;odo</th>
							<th>Actividades</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var nomina in nominas)
						{
							<tr>
								<td>@nomina.NominaId</td>
								<td>@nomina.Empleado.Nombre @nomina.Empleado.Apellido</td>
								<td>@nomina.Empleado.PuestosTrabajo.Puesto</td>
								<td>@nomina.PeriodoPago</td>
								<td>
									<div class="btn-group" role="group">
										<button type="button" class="btn btn-outline-info" @onclick="()=> IrADetalles(nomina.NominaId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Ver detalles">
											<i class="bi bi-eye"></i>
										</button>

										<button type="button" class="btn btn-outline-warning" @onclick="()=> IrAEditar(nomina.NominaId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Editar">
											<i class="bi bi-pencil-square"></i>
										</button>
										<button type="button" class="btn btn-outline-danger" @onclick="()=> IrAEliminar(nomina.NominaId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Eliminar">
											<i class="bi bi-trash3-fill"></i>
										</button>
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
		<div class="card-footer">
			<p><strong>Total de Nominas:</strong> @nominas.Count</p>
		</div>
	</div>
</div>

@code {
	public List<Nomina> nominas = new List<Nomina>();
	public string filtro { get; set; }
	public string valorFiltro { get; set; }
	public string mensaje { get; set; }
	public bool loading { get; set; } = true;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		nominas = await nominaService.Listar(e => true);

		loading = false;

		if (nominas.Count == 0)
			StateHasChanged();
	}

	public async Task Buscar()
	{
		List<Nomina> resultado = new List<Nomina>();

		// Obtener todos los empleados para realizar el filtrado en el lado del cliente
		var nominasList = await nominaService.Listar(e => true);

		switch (filtro)
		{
			case "id":
				if (int.TryParse(valorFiltro, out int id))
				{
					resultado = nominasList.Where(e => e.NominaId == id).ToList();
				}
				break;
			case "empleado":
				resultado = nominasList.Where(e => e.Empleado.Nombre.
					Contains(valorFiltro, StringComparison.OrdinalIgnoreCase) ||
					e.Empleado.Apellido.Contains(valorFiltro, StringComparison.OrdinalIgnoreCase) ||
					(e.Empleado.Nombre + " " + e.Empleado.Apellido).
					Contains(valorFiltro, StringComparison.OrdinalIgnoreCase)).ToList();
				break;
			case "puesto":
				resultado = nominasList.Where(e =>
					e.Empleado.PuestosTrabajo.Puesto.
					Contains(valorFiltro, StringComparison.OrdinalIgnoreCase)).ToList();
				break;
		}

		if (resultado == null || resultado.Count == 0)
		{
			// Maneja el caso cuando no se encuentran empleados
			mensaje = "No se encontraron empleados con el filtro especificado.";
		}
		else
		{
			nominas = resultado;
			mensaje = string.Empty; // Limpia el mensaje si se encuentran empleados
		}

		StateHasChanged();
	}

	public async Task Restablecer()
	{
		nominas = await nominaService.Listar(e => true);
	}

	public void IrACrear()
	{
		navigation.NavigateTo("/CreateNominas");
	}

	public void IrADetalles(int id)
	{
		navigation.NavigateTo($"/ViewNominas/nominaId={id}");
	}

	public void IrAEditar(int id)
	{
		navigation.NavigateTo($"/EditNominas/nominaId={id}");
	}

	public void IrAEliminar(int id)
	{
		navigation.NavigateTo($"/DeleteNominas/nominaId={id}");
	}
}

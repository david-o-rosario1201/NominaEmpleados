@page "/PuestosTrabajo"
@rendermode InteractiveServer
@inject PuestosTrabajoService puestosTrabajoService
@inject NavigationManager navigation

<PageTitle>Puestos de Trabajo</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Puestos de Trabajo</strong></h3>
			<button type="button" class="btn btn-outline-primary" @onclick="IrACrear"><i class="bi bi-plus-circle" /> Crear</button>
		</div>
		@*Body*@
		<div class="card-body">
			@if (loading)
			{
				<div class="d-flex justify-content-center">
					<div class="spinner-border text-info">
					</div>
				</div>
			}
			else if (puestosTrabajo.Count == 0)
			{
				<h1 class="miMensaje"><i class="bi bi-exclamation-triangle" /> No hay empleados creados</h1>
			}
			else
			{
				@*Campos a Filtrar*@
				<div class="mb-3">
					<div class="row align-items-center">
						<label class="form-label" for="filtro"><strong>Campo a Filtrar:</strong></label>
						<div class="col-3">
							<InputSelect id="filtro" class="form-select" @bind-Value="filtro">
								<option selected disabled>Elije una opci&oacute;n</option>
								<option value="id">Id</option>
								<option value="puesto">Puesto</option>
							</InputSelect>
						</div>
						<div class="col-auto miFlecha">
							<p>→</p>
						</div>
						<div class="col-4">
							<div class="input-group">
								<InputText class="form-control" @bind-Value="valorFiltro" placeholder="Ingrese un dato para filtrar"></InputText>
								<button type="button" class="btn btn-outline-primary" @onclick="Buscar"><i class="bi bi-search" /></button>
							</div>
						</div>
						<div class="col-3">
							<button type="button" class="btn btn-outline-secondary" @onclick="Restablecer"><i class="bi bi-arrow-clockwise" /> Restablecer</button>
						</div>
					</div>
				</div>

				<table class="table table-bordered miTabla">
					<thead>
						<tr>
							<th>PuestosId</th>
							<th>Puesto de Trabajo</th>
							<th>Sueldo</th>
							<th>Actividades</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var puestos in puestosTrabajo)
						{
							<tr>
								<td>@puestos.PuestoTrabajoId</td>
								<td>@puestos.Puesto</td>
								<td>@puestos.Sueldo.ToString("N2")</td>
								<td>
									<div class="btn-group" role="group">
										<button type="button" class="btn btn-outline-info" @onclick="()=> IrADetalles(puestos.PuestoTrabajoId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Ver detalles">
											<i class="bi bi-eye"></i>
										</button>

										<button type="button" class="btn btn-outline-warning" @onclick="()=> IrAEditar(puestos.PuestoTrabajoId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Editar">
											<i class="bi bi-pencil-square"></i>
										</button>
										<button type="button" class="btn btn-outline-danger" @onclick="()=> IrAEliminar(puestos.PuestoTrabajoId)" data-bs-toggle="tooltip" data-bs-placement="top" title="Eliminar">
											<i class="bi bi-trash3-fill"></i>
										</button>
									</div>
								</td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
		<div class="card-footer">
			<p><strong>Total de Puestos de Trabajo:</strong> @puestosTrabajo.Count</p>
		</div>
	</div>
</div>

@code {
	public List<PuestosTrabajo> puestosTrabajo = new List<PuestosTrabajo>();
	public string filtro { get; set; }
	public string valorFiltro { get; set; }
	public string mensaje { get; set; }
	public bool loading { get; set; } = true;
	public DateTime desde { get; set; } = DateTime.Today;
	public DateTime hasta { get; set; } = DateTime.Today;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);
		puestosTrabajo = await puestosTrabajoService.Listar(e => true);

		loading = false;

		if (puestosTrabajo.Count == 0)
			StateHasChanged();
	}

	public async Task Buscar()
	{
		List<PuestosTrabajo> resultado = new List<PuestosTrabajo>();

		var puestosList = await puestosTrabajoService.Listar(e => true);

		switch (filtro)
		{
			case "id":
				if (int.TryParse(valorFiltro, out int id))
				{
					resultado = puestosList.Where(e => e.PuestoTrabajoId == id).ToList();
				}
				break;
			case "puesto":
				resultado = puestosList.Where(e =>
					e.Puesto.Contains(valorFiltro, StringComparison.OrdinalIgnoreCase)).ToList();
				break;
		}

		if (resultado == null || resultado.Count == 0)
			mensaje = "No se encontraron empleados con el filtro especificado.";

		else
		{
			puestosTrabajo = resultado;
			mensaje = string.Empty;
		}

		StateHasChanged();
	}

	public async Task Restablecer()
	{
		puestosTrabajo = await puestosTrabajoService.Listar(e => true);
	}

	public void IrACrear()
	{
		navigation.NavigateTo("/CreatePuestosTrabajo");
	}

	public void IrADetalles(int id)
	{
		navigation.NavigateTo($"/ViewPuestosTrabajo/puestoId={id}");
	}

	public void IrAEditar(int id)
	{
		navigation.NavigateTo($"/EditPuestosTrabajo/puestoId={id}");
	}

	public void IrAEliminar(int id)
	{
		navigation.NavigateTo($"/DeletePuestosTrabajo/puestoId={id}");
	}
}
